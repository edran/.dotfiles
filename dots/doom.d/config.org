#+title: Doom Emacs Configuration
#+author: Nantas Nardelli
#+language: en
#+property: header-args :tangle yes :cache yes :results silent :comments link

* Preface

I have been using Emacs as my editor for more than a decade -- well before I
started calling myself a programmer -- and the journey has been quite the ride
so far.

My configuration has gone through many [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][bankruptcies]], including a few that
predate any usage (and knowledge!) of version control on my part. It's current
form, which most certainly is not its final (but which I hope to be its
/present/ for at least a few more years), is based on the amazing =doom emacs=
and =org-mode=. Thanks to these frameworks, it is much, much slimmer than it
used to be at various points of its history.

Which is both good and bad. But /c'est la vie/ :)

** Basic usage info

In theory, the latest version of =doom emacs= should be able to simply run this
configuration. The first time, it needs to be generated via:

#+begin_src sh
$ doom sync  # generates config.el from tangling config.org
#+end_src

Afterwards, this org file will be tangled upon save, hopefully. If it's not the
case, =doom refresh= should do the job.

My main dev setup is a MBP running a heavily configured =MacOS 10.14=, but most
of this config should behave properly on modern linux distros so long as the
environment is configured similarly to what is provided by my [[https://github.com/edran/.dotfiles][dotfiles]].

** Known issues

This config is a /Forever Work In Progress™/, and thus there are things that I
wish were fixed / implemented that either I haven't had the time to tackle
and/or have the capabilities to properly do so.

*** org headers are indented

This sucks. I want as much horizontal space as possible without having to
soft-wrap everything.

*** conda environments interact weirdly with lsp

Calling =conda-env-activate= doesn't restart the lsp server. Worse,
=lsp-restart-workspace= seems to successfully kill the server, but a further
=lsp= call is required for the server to be up again.

**** TODO Make =conda-env-activate= automatically call =lsp-restart-workspace=
**** TODO Fix =lsp-restart-workspace= so that it actually restarts the lsp server

*** I would like hard wrap to work its magic on the paragraph automatically

Rather than the last sentence / lines.

** Things to check out

*** [[github:itai33/evil-tex][evil-tex]] :package:

I should check this out eventually, as it could likely improve my commands/text
ratio.

*** ~org-pretty-mode~, a minor mode that hides org syntax

Seems to behave a little bit weirdly with links + newlines.

*** ~org-noter~, a pdf annotation tool
*** ~pdf-tools~, better pdf tooling
*** ~org-download~
*** ~mathpix.el~ to go from images to latex code
*** ~anki-editor~
*** ~org-roam-bibtex~
*** ~bibtex-completion~
*** ~org-noter~

** Interesting other configurations

Here's an extremely partial list of the configurations I have been stealing ideas
from, and/or that I found particularly interesting and noteworthy.

*** [[https://github.com/bastibe/.emacs.d/blob/master/init.el][bastibe/.emacs.d]]

Bastian is the author of =org-journal=.
*** [[https://tecosaur.github.io/emacs-config/config.html][tecosaur's config]]

Literate config based on doom emacs.

*** [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][jethrokuan's config]]

Author of =org-roam=.

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:

=doom= uses =packages.el= to contain user-provided packages. Any packaging code
present in the following headings will be tangled to that file. After editing
these section, a ~doom refresh~ is required.

** General docs
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
The packaging system is based on [[github:raxod502/straight.el][straight.el]], which has quite a nice [[https://github.com/raxod502/straight.el#the-recipe-format][recipe
format]]. On top of this, =doom= provides some useful macros:

#+begin_src emacs-lisp
;; if the  package is on MELPA / ELPA / Emacsmirror
(package! package-name)
;; if the package is on github and contains a PACKAGENAME.el
(package! package-name
  :recipe (:host github :repo "user/repo"))
;; otherwise...
(package! package-name
  :recipe (:host github :repo "user/repo"
           :files ("package-name.el" "lisp/*.el")))  ;; and so on...
#+end_src

Disabling a package that comes with doom is also fairly straightforward (however
it +will+ could have unintended consequences):

#+begin_src emacs-lisp
(package! package-name :disable t)
#+end_src

Packages can also be overridden with a fork quite easily (unspecified properties
will be inherited):

#+begin_src emacs-lisp
(package! package-name
  :recipe (:repo "user/package"
           :branch "develop"
           :nonrecursive t))
#+end_src

** Disable byte compilation

Do not byte compile the tangled =.el= file.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** Add colour to Emacs' manual pages

#+begin_src emacs-lisp
(package! info-colors :pin "47ee73c...")
#+end_src
** Org-mode extensions

The following packages make ~org-mode~ even more awesome than usual.

*** org-anki

~org-anki~ is a package I'm developing. Will be released Soon™.

#+begin_src emacs-lisp
(package! org-anki
  :recipe (:local-repo "~/.doom.d/packages/org-anki" :no-byte-compile t))
#+end_src
*** org-ref
#+begin_src emacs-lisp
(package! org-ref :pin "b05d6b4434...")
#+end_src
*** Prettier org-mode

~org-fragtog~ allows to toggle LaTeX previews.

#+begin_src emacs-lisp
(package! org-fragtog :pin "3eea7f1708...")
#+end_src

~org-pretty-tags~ makes it possible to replace boring tags with fun ones!

#+begin_src emacs-lisp
(package! org-pretty-tags :pin "40fd72f3e7...")
#+end_src

** Misc

=selectric-mode= is great for impressing people or for extremely angry coding.
Either way, worth it :)

#+begin_src emacs-lisp
(package! selectric-mode :pin "bb9e666...")
#+end_src

* Essential configuration

Lexical binding can result into faster execution of this file (see
[[https://nullprogram.com/blog/2016/12/22/][this blog post]]), so we activate it.

#+begin_src emacs-lisp :comment no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Personal info

These are some basic information that are needed for e.g., =GPG=, =org-export=, etc.

#+begin_src emacs-lisp
(setq user-full-name "Nantas Nardelli"
      user-mail-address "nantas.nardelli@gmail.com")
#+end_src

** Telling Emacs about my lab

I use =~/lab= as my root directory for pretty much all development work. This
helps some tools tinker with my data. /All hail automatic project management
software./

#+begin_src emacs-lisp
(defvar edran-lab-path "~/lab" "Path to the local laboratory")

(setq projectile-project-search-path (list edran-lab-path)       ;; this is not recursive, sadly
      magit-repository-directories (list (cons edran-lab-path  2)))
#+end_src

* Graphical configuration
All of this stuff relates to visual behaviour.

** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-variable-pitch-font (font-spec :family "Helvetica Neue" :size 18)
      doom-serif-font (font-spec :family "Times New Roman" :weight 'light))
#+end_src

Sadly ~doom-variable-pitch-font~ actually doesn't control that much. In this
particular case, I wish for the variable pitch font to be bigger (since in
general I'm using it for stuff like org buffers).

#+begin_src emacs-lisp :tangle yes
(setq mixed-pitch-set-height 18)
#+end_src

** Setting up theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

I don't want to display =LF UTF-8= in the modeline, since that is the default.

#+begin_src emacs-lisp
(defun nn/doom-modeline-conditional-buffer-encoding ()
  "Don't show file encoding if it's utf-8"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'nn/doom-modeline-conditional-buffer-encoding)
#+end_src

** Disable vertical line numbers
This can be reactivated when I have a better dev machine :(

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

** Window title
Sometimes I need to parse the name of Emacs windows with other scripts /
software, and I'd rather stick to standard strings to future-proof things:

#+begin_src emacs-lisp
(setq frame-title-format "%b - Emacs")
#+end_src

* Buffers

Oh yeah, now we get to the fun configuration!

** Better default names when in conflict
Whenever I'm coding some nasty framework, I tend to have to open multiple
=__init__.py= at the same time. I'd like them to be prefixed with the least
amount of information needed to disentangle them:

#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+end_src

** Rename default buffer back to *scratch*
=*doom*= is nice, but my muscle memory complains a lot.

#+begin_src emacs-lisp
;; TODO It seems like a *doom-scratch* buffer is still created. Should be disabled.
(setq doom-fallback-buffer-name "*scratch*")
#+end_src
* org-mode
** Basic files and folders
#+begin_src emacs-lisp
(setq org-directory (getenv "ORGDIR")
      org-archive-location (concat
                            (file-name-as-directory org-directory)
                            ".archive/%s::"))
#+end_src
** Deft

I use ~deft~ for searching my org files (though I should explore more what
org-roam gives me...), so I set it up here:

#+begin_src emacs-lisp
(setq deft-directory org-directory
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** Global config

#+begin_src emacs-lisp
(setq ;; org-src-window-setup 'current-window
      org-return-follows-link t                    ;; follow links on RET
      org-use-property-inheritance t               ;; inherit properties in subheadings
      org-list-allow-alphabetical t                ;; Allow to use alphabetical bullets
      org-catch-invisible-edits 'smart             ;; Be more mindful of what I delete

      org-adapt-indentation nil                    ;; I want everything left-justified
      org-superstar-remove-leading-stars t

      org-export-in-background t                   ;; NOTE: it just needs to be defined

      ;; make bullets w/ different depth use different chars
      org-list-demote-modify-bullet '(("+" . "-")  ;; different depth => different bullets
                                      ("-" . "+"))

      org-babel-load-languages '((dot . t)         ;; languages allowed to be evaluated
                                 (emacs-lisp . t)
                                 (python . t)
                                 (R . t)))

(after! org
  (setq org-startup-indented nil  ;; I don't like indents
        ;;
   ))
#+end_src

** UI
  
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)

(after! org (setq org-ellipsis " ▾ "))

(after! org-superstar
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷" "☷" "☷" "☷")
        org-superstar-prettify-item-bullets t
      ))

(custom-set-faces!
  '(org-level-1 :inherit outline-1 :weight extra-bold :height 1.4)
  '(org-level-2 :inherit outline-2 :weight bold :height 1.15)
  '(org-level-3 :inherit outline-3 :weight bold :height 1.12)
  '(org-level-4 :inherit outline-4 :weight bold :height 1.09)
  '(org-level-5 :inherit outline-5 :weight semi-bold :height 1.06)
  '(org-level-6 :inherit outline-6 :weight semi-bold :height 1.03)
  '(org-level-7 :inherit outline-7 :weight semi-bold)
  '(org-level-8 :inherit outline-8 :weight semi-bold)
)
;; (custom-set-faces!
;;   '(outline-1 :weight extra-bold :height 1.2)
;;   '(outline-2 :weight bold :height 1.15)
;;   '(outline-3 :weight bold :height 1.12)
;;   '(outline-4 :weight semi-bold :height 1.09)
;;   '(outline-5 :weight semi-bold :height 1.06)
;;   '(outline-6 :weight semi-bold :height 1.03)
;;   '(outline-8 :weight semi-bold)
;;   '(outline-9 :weight semi-bold))

(after! org
  (custom-set-faces!
    '(org-document-title :height 1.3)))
#+end_src

** Spellcheck

Enabling flyspell when visiting org files.

#+begin_src emacs-lisp
(after! org (add-hook 'org-mode-hook 'turn-on-flyspell))
#+end_src

** Journal
#+begin_src emacs-lisp
(setq org-journal-file-type 'weekly
      org-journal-file-format "%Y-%m-%d.org"
      org-journal-enable-agenda-integration t)
#+end_src
** TeX / bibtex support

First, we make sure that reftex and bibtex know where my bibliography is.

#+begin_src emacs-lisp
(setq reftex-default-bibliography (list (concat
                                         (file-name-as-directory org-directory)
                                         "library.bib"))
      bibtex-completion-bibliography (concat (file-name-as-directory org-directory) "library.bib"))
#+end_src

Then let's activate ~org-ref~:

#+begin_src emacs-lisp
(use-package! org-ref
   :after org
   :config
    (setq
     org-ref-completion-library 'org-ref-ivy-cite  ;; use ivy for completion
     org-ref-default-bibliography reftex-default-bibliography
     ))
#+end_src

Let's also add ~org-fragtog~, since we wish to be able to modify LaTeX snippets
simply by moving the cursor on them.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

We then want them to look alright, so let's make org use a sans font, as well as
highlighting them:

#+begin_src emacs-lisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)
        org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{color}

\\usepackage[T1]{fontenc}
\\usepackage{mathtools}
\\usepackage{textcomp,amssymb}
\\usepackage[makeroom]{cancel}

\\usepackage{booktabs}

\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
% my custom stuff
\\usepackage{arev}
\\usepackage{arevmath}"))
#+end_src

** Roam
#+begin_src emacs-lisp
(setq org-roam-directory (concat
                          (file-name-as-directory org-directory)
                          "kb/"))

(setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n#+date: %t"
           :unnarrowed t)
          ("c" "compendium" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "compendium/${slug}"
           :head "#+title: compendium/${title}\n#+date: %t"
           :unnarrowed t)
          ("r" "reviews" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "reviews/${slug}"
           :head "#+title: review/${title}\n#+date: %t"
           :unnarrowed t)
          ("R" "Professional reviews" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "reviews/professional/${slug}"
           :head "#+title: review/${title}\n#+date: %t"
           :unnarrowed t)
          ))
#+end_src

** Other stuff

#+begin_src emacs-lisp
(after! org
  (map! :localleader
        :map org-mode-map
        "M-n" #'org-next-visible-heading
        "M-p" #'org-previous-visible-heading))
#+end_src

** org-anki
#+begin_src emacs-lisp :tangle yes
(use-package! org-anki
  :hook (org-mode . org-anki-mode))
#+end_src
* Misc
** UX changes

#+begin_src emacs-lisp
;;;; UX
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)

;; Switch to new window when splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t

      ;; isearch
      isearch-lazy-count t
      isearch-allow-scroll 'unlimited

      ;; magit
      magit-save-repository-buffers 'dontask
      ;; Don't restore window config after quitting magit
      magit-inhibit-save-previous-winconf t)

(add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
(add-to-list 'ispell-skip-region-alist '("~" "~"))
(add-to-list 'ispell-skip-region-alist '("=" "="))

#+end_src

** Python

#+begin_src emacs-lisp
(setq conda-anaconda-home "~/.conda")
#+end_src
** TeX

* Editing setup
Most of =evil= is already well configured with =doom=, however I like to do some
additional tweaking:

#+BEGIN_SRC emacs-lisp
(setq
 ;; All changes are considere one block in insert mode by default. This is not
 ;; great most of the time, so we make evil use Emacs' heuristics to group
 ;; changes.
 evil-want-fine-undo t)
#+END_SRC

