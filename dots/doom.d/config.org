#+title: Doom Emacs Configuration
#+author: Nantas Nardelli
#+language: en
#+property: header-args:emacs-lisp :tangle "config.el" :cache yes :results silent :comments link

* Preface

I have been using Emacs as my editor for more than a decade -- well before I
started calling myself a programmer -- and the journey has been quite the ride
so far.

My configuration has gone through many [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][bankruptcies]], including a bunch that
predate any usage (and knowledge!) of version control on my part. It's current
form, which most certainly is not its final (but which I hope to be its /present/
for at least a few more years), is based on the amazing =doom emacs= and =org-mode=.
Thanks to these frameworks, it is much, much slimmer than it used to be at
various points of its history.

Which is both good and bad. But /c'est la vie/ :)

** Basic usage info

In theory, the latest version of =doom emacs= should be able to simply run this
configuration. The first time, it needs to be generated via:

#+begin_src sh :tangle no
$ doom sync  # generates config.el from tangling config.org
#+end_src

Afterwards, this org file will be tangled upon save, hopefully. If it's not the
case, =doom refresh= should do the job.

My main dev setup is a MBP running a heavily configured =MacOS 10.14=, but most
of this config should behave properly on modern linux distros so long as the
environment is configured similarly to what is provided by my [[https://github.com/edran/.dotfiles][dotfiles]].

** Known issues

This config is a /Forever Work In Progress™/, and thus there are things that I
wish were fixed / implemented that either I haven't had the time to tackle
and/or have the capabilities to properly do so.

*** TODO I would like hard wrap to work its magic on the paragraph automatically

Rather than the last sentence / lines.

*** TODO I should set bigger height for org headings only in the knowledge base

Since this makes some of the organisational files a little painful to manage.
*** TODO In org files, enter (in normal mode) should open links.
*** TODO indent-guides + mixed-pitch-mode messes up code blocks in org buffers
*** TODO When using ivy-bibtex, parentheses become red...

** Things to check out
*** [[github:itai33/evil-tex][evil-tex]] :package:

I should check this out eventually, as it could likely improve my commands/text
ratio.

*** ~org-download~
*** ~mathpix.el~ to go from images to latex code

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:

=doom= uses =packages.el= to contain user-provided packages. Any packaging code
present in the following headings will be tangled to that file. After editing
these section, a ~doom refresh~ is required.

** How-to
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
The packaging system is based on [[github:raxod502/straight.el][straight.el]], which has quite a nice [[https://github.com/raxod502/straight.el#the-recipe-format][recipe
format]]. On top of this, =doom= provides some useful macros:

#+begin_src emacs-lisp
;; if the  package is on MELPA / ELPA / Emacsmirror
(package! package-name)
;; if the package is on github and contains a PACKAGENAME.el
(package! package-name
  :recipe (:host github :repo "user/repo"))
;; otherwise...
(package! package-name
  :recipe (:host github :repo "user/repo"
           :files ("package-name.el" "lisp/*.el")))  ;; and so on...
#+end_src

Disabling a package that comes with doom is also fairly straightforward (however
it +will+ could have unintended consequences):

#+begin_src emacs-lisp
(package! package-name :disable t)
#+end_src

Packages can also be overridden with a fork quite easily (unspecified properties
will be inherited):

#+begin_src emacs-lisp
(package! package-name
  :recipe (:repo "user/package"
           :branch "develop"
           :nonrecursive t))
#+end_src

** Disable byte compilation

Do not byte compile the tangled =.el= file.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** Add colour to Emacs' manual pages

#+begin_src emacs-lisp
(package! info-colors :pin "47ee73c...")
#+end_src
** Org-mode extensions

The following packages make ~org-mode~ even more awesome than usual.

*** org-roam

Doom includes Roam, but it's usually fairly outdated (since =org-roam= is moving
pretty fast now.) This is why it's best for now to manually pin it to more
recent versions.

#+begin_src emacs-lisp
(package! org-roam
    :recipe (:host github :repo "org-roam/org-roam")
    :pin "0cce9d1...")
(package! org-roam-server :pin "8d1d143f5d...")
#+end_src

*** org-ref / org-roam-bibtex

This is basically all the packages needed to make bibliography management in
org-mode happen smoothly.

#+begin_src emacs-lisp
(package! bibtex-completion :pin "12f8809aac3a13dd11a1c664a13f789005f7a199")
(package! ivy-bibtex :pin "12f8809aac3a13dd11a1c664a13f789005f7a199")
(package! org-ref :pin "f582e9c53e8e4c5dcc1d3889f1b5c536c9a9b524")
(package! org-roam-bibtex :pin "1ad1f479139a97c2d473fe4e0d406390d6159113")
#+end_src

*** org-anki

~org-anki~ is a package I'm developing. Will be released Soon™.

#+begin_src emacs-lisp
(package! org-anki
  :recipe (:local-repo "~/.doom.d/packages/org-anki" :no-byte-compile t))
#+end_src

*** Prettier org-mode

~org-fragtog~ allows to toggle LaTeX previews.

#+begin_src emacs-lisp
(package! org-fragtog :pin "3eea7f1708...")
#+end_src

~org-pretty-tags~ makes it possible to replace boring tags with fun ones!

#+begin_src emacs-lisp
(package! org-pretty-tags :pin "40fd72f3e7...")
#+end_src

** Misc

=atomic-chrome= is used to enable editing text boxes with emacs.

#+begin_src emacs-lisp
(package! atomic-chrome)
#+end_src

=selectric-mode= is great for impressing people or for extremely angry coding.
Either way, worth it :)

#+begin_src emacs-lisp
(package! selectric-mode :pin "bb9e666...")
#+end_src

* Essential configuration

Lexical binding can result into faster execution of this file (see
[[https://nullprogram.com/blog/2016/12/22/][this blog post]]), so we activate it.

#+begin_src emacs-lisp :comment no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Personal info

These are some basic information that are needed for e.g., =GPG=, =org-export=, etc.

#+begin_src emacs-lisp
(setq user-full-name "Nantas Nardelli"
      user-mail-address "nantas.nardelli@gmail.com")
#+end_src

** Telling Emacs about my lab

I use =~/lab= as my root directory for pretty much all development work. This
helps some tools tinker with my data. /All hail automatic project management
software./

#+begin_src emacs-lisp
(defvar edran-lab-path "~/lab" "Path to the local laboratory")

(setq projectile-project-search-path (list edran-lab-path)       ;; this is not recursive, sadly
      magit-repository-directories (list (cons edran-lab-path  2)))
#+end_src

* Graphical configuration

All of this stuff relates to visual behaviour.

** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-variable-pitch-font (font-spec :family "Helvetica Neue" :size 18)
      doom-serif-font (font-spec :family "Times New Roman" :weight 'light))
#+end_src

Sadly ~doom-variable-pitch-font~ actually doesn't control that much. In this
particular case, I wish for the variable pitch font to be bigger (since in
general I'm using it for stuff like org buffers).

#+begin_src emacs-lisp
(setq mixed-pitch-set-height 14)
#+end_src

** Setting up theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

I don't want to display =LF UTF-8= in the modeline, since that is the default.

#+begin_src emacs-lisp
(defun nn/doom-modeline-conditional-buffer-encoding ()
  "Don't show file encoding if it's utf-8"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'nn/doom-modeline-conditional-buffer-encoding)
#+end_src

** Disable vertical line numbers
This can be reactivated when I have a better dev machine :(

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

** Window title
Sometimes I need to parse the name of Emacs windows with other scripts /
software, and I'd rather stick to standard strings to future-proof things:

#+begin_src emacs-lisp
(setq frame-title-format "%b - Emacs")
#+end_src

* Buffers

Oh yeah, now we get to the fun configuration!

** Better default names when in conflict
Whenever I'm coding some nasty framework, I tend to have to open multiple
=__init__.py= at the same time. I'd like them to be prefixed with the least
amount of information needed to disentangle them:

#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+end_src

** Rename default buffer back to *scratch*
=*doom*= is nice, but my muscle memory complains a lot.

#+begin_src emacs-lisp
;; TODO It seems like a *doom-scratch* buffer is still created. Should be disabled.
(setq doom-fallback-buffer-name "*scratch*")
#+end_src
* org-mode
** Basic files and folders
#+begin_src emacs-lisp
(setq org-directory (file-name-as-directory (getenv "ORGDIR"))
      org-archive-location (concat
                            org-directory
                            ".archive/%s::")
      org-default-notes-file (concat org-directory "tasks.org"))

(defvar nn/org-inbox-file (concat org-directory "inbox.org")
  "Path to the inbox file.")
#+end_src
** General behaviour

#+begin_src emacs-lisp
(setq ;; org-src-window-setup 'current-window
      org-return-follows-link t                    ;; follow links on RET
      org-use-property-inheritance t               ;; inherit properties in subheadings
      org-list-allow-alphabetical t                ;; Allow to use alphabetical bullets
      org-catch-invisible-edits 'smart             ;; Be more mindful of what I delete

      org-babel-load-languages '((dot . t)         ;; languages allowed to be evaluated
                                 (emacs-lisp . t)
                                 (python . t)
                                 (R . t)))
#+end_src

Doom's default todo keywords are OK, however I also want a few more, so I'm
redefining them here.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
       '((sequence "TODO(t)" "PROJ(p)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
         (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
         (sequence "HABIT(z)" "|" "TICKED(Z)"))))
#+end_src

*** Indentation

I want everything left-justified.

#+begin_src emacs-lisp
(after! org
  (setq org-startup-indented nil  ;; I don't like indents
        org-adapt-indentation nil
   ))
#+end_src

** UI

I want org files to use =mixed-pitch-mode=, since it is nicer to read prose in
variable pitch fonts.

#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)
#+end_src

The title and the headings need to standout more.

#+begin_src emacs-lisp
(after! org
  (custom-set-faces!
    '(org-document-title :height 1.3)
    '(org-level-1 :inherit outline-1 :weight extra-bold :height 1.4)
    '(org-level-2 :inherit outline-2 :weight bold :height 1.15)
    '(org-level-3 :inherit outline-3 :weight bold :height 1.12)
    '(org-level-4 :inherit outline-4 :weight bold :height 1.09)
    '(org-level-5 :inherit outline-5 :weight semi-bold :height 1.06)
    '(org-level-6 :inherit outline-6 :weight semi-bold :height 1.03)
    '(org-level-7 :inherit outline-7 :weight semi-bold)
    '(org-level-8 :inherit outline-8 :weight semi-bold)))
#+end_src

I also like to use the small black down-pointing triangle as the ellipsis, as I
would normally not type it myself (and thus it is easier to differentiate it
from actual usage of ellipsis).

#+begin_src emacs-lisp
(after! org (setq org-ellipsis " ▾ "))
#+end_src

When using simple list, I want different levels to have different bullets.

#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-")  ;; different depth => different bullets
                                      ("-" . "+")))
#+end_src

*** Superstar

I want the headings to be indented, as well as being represented using some
[[https://en.wikipedia.org/wiki/Bagua][symbols]] that roughly give me an indication of the indent level.

#+begin_src emacs-lisp
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷" "☷" "☷" "☷")
        org-superstar-prettify-item-bullets t
        org-superstar-remove-leading-stars nil
      ))
#+end_src

** Capture
#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(("i" "Quick inbox" entry (file+headline nn/org-inbox-file "Tasks")
           "* TODO %^{Task description}"
           :immediate-finish t)
          ("I" "Inbox" entry (file+headline nn/org-inbox-file "Tasks")
           "* TODO %?")
          ;; Dates
          ("." "Today" entry (file+headline nn/org-inbox-file "Tasks")
           ,(concat "* TODO %^{Task description (scheduled today)}\n"
                    "SCHEDULED: %t")
           :immediate-finish t)
          ("d" "Date")
          ("ds" "Scheduled" entry (file+headline nn/org-inbox-file "Tasks")
           ,(concat "* TODO %?\n"
                    "SCHEDULED: %^{Scheduled date}t"))
          ("dd" "Deadline" entry (file+headline nn/org-inbox-file "Tasks")
           ,(concat "* TODO %?\n"
                    "DEADLINE: %^{Deadline date}t"))
          ("w" "Web" entry (file+headline nn/org-inbox-file "Web")
           "* TODO %:annotation \n%:i\n %i"
           :immediate-finish t)
          )))
#+end_src

*** MacOS setup

To setup capture on MacOS, save the following script as =org-capture.app=
using =Script Editor= into =/Applications=:

#+begin_src sh :tangle no
on open location this_URL
 do shell script "/usr/local/Cellar/emacs-plus@27/27.1/bin/emacsclient \"" & this_URL & "\""
end open location
#+end_src

Then add this to =Info.plist= inside =org-capture.app=:

#+begin_src xml :tangle no
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLName</key>
        <string>org-protocol handler</string>
        <key>CFBundleURLSchemes</key>
        <array>
        <string>org-protocol</string>
        </array>
    </dict>
</array>
#+end_src

Testing with the following:

#+begin_src sh :tangle no
/usr/local/Cellar/emacs-plus@27/27.1/bin/emacsclient \
  "org-protocol://capture?template=w&url=testurl&title=testtitle&body=testbody"
#+end_src

Afterwards one can for instance use some javascript to make a bookmark as
follows:

#+begin_src js :tangle no
javascript:location.href='org-protocol://capture?template=w'
    + '&url=' + encodeURIComponent(window.location.href)
    + '&title='+encodeURIComponent(document.title)
    + '&body='+encodeURIComponent(window.getSelection());
#+end_src

Chrome annoying also disabled the ability to easily whitelist protocols. To
disable the confirmation window, run:

#+begin_src sh :tangle no
$ defaults write $HOME/Library/Preferences/com.google.Chrome.plist URLWhitelist -array-add "org-protocol://*"
#+end_src

** Agenda

First, let's make sure that the agenda pulls all the files in the org directory
as well as the project directory. The former are used for standard task
management, while the latter are used both as knowledge bases for the project
and task tracking.

#+begin_src emacs-lisp
(setq org-agenda-files (list org-directory
                             (concat org-directory "kb/projects")))
#+end_src

*** Behaviour

When opening an item from the agenda, I want the context (parent heading and
siblings) to be visible.

#+begin_src emacs-lisp
(add-hook 'org-agenda-after-show-hook 'org-reveal)
#+end_src

I also don't want tasks that are blocked (like =PROJ= ones, which have multiple
sub-TODOs) to be dimmed in the view, otherwise I have issues on days when they
are scheduled.

#+begin_src emacs-lisp
(after! org
  (setq org-agenda-dim-blocked-tasks nil))
#+end_src

*** Agenda commands

I make a good amount of use of habits, and I like to keep them separate from the
standard today view.

#+begin_src emacs-lisp
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current) subtree-end nil)))

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit") subtree-end nil)))

(setq org-agenda-custom-commands
      '(("d" "High-pri, habits, agenda, and all TODOs"
        ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "High-priority TODOs:")))
         (agenda ""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("HABIT")))
                  (org-agenda-span 'day)
                  (org-agenda-start-day nil)
                  (org-agenda-overriding-header "Habits:")))
         (agenda ""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("HABIT")))
                  (org-agenda-span 'week)
                  (org-agenda-start-day "-1d")
                  (org-agenda-overriding-header "Weekly schedule:")))
         (alltodo ""
                  ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                  (air-org-skip-subtree-if-priority ?A)
                                                  (org-agenda-skip-if nil '(scheduled deadline))))
                   (org-agenda-overriding-header "ALL normal priority tasks:"))))
        (
         (org-agenda-compact-blocks nil)))))

(setq org-agenda-include-diary t)
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-show-all-today t)
#+end_src

*** Keybindings
Doom by default uses =SPC o a= for =org-agenda=, however I use it so often that the
extra "o a a" is way too many strokes.

#+begin_src emacs-lisp
(map! :leader "a" #'org-agenda)
#+end_src

Furthermore, I want to quickly be able to save all buffers, and to have a view
of the context of each agenda item whenever I wish it. Thus, I'm remapping =w= and
=f= so that they are actually useful in the agenda map.

#+begin_src emacs-lisp
(after! org
  (map! :map evil-org-agenda-mode-map
        :m "w" #'org-save-all-org-buffers
        :m "f" #'org-agenda-follow-mode))
#+end_src

I also want =j= and =k= to jump to agenda items instead of following the textual
newlines (since I can search if I /really/ want to copy dates / times / headers /
etc. ).

#+begin_src emacs-lisp
(after! org
  (map! :map org-agenda-mode-map
        [remap org-agenda-next-line] #'org-agenda-next-item
        [remap org-agenda-previous-line] #'org-agenda-previous-item))
#+end_src

** Logging and clocking

I generally want a timestamp when:
 - setting a task to a done state
 - rescheduling a task (including moving a deadline)

I also want all this information into a drawer, so that I don't see it unless I
really need it.

#+begin_src emacs-lisp
(setq org-log-into-drawer t     ;; defaults to LOGBOOK
      org-log-done 'time
      org-log-reschedule 'time
      org-log-redeadline 'time)
#+end_src

** Exporting

I hate it that exporting big files locks emacs -- so, let's make it happen in
the background.

#+begin_src emacs-lisp
(setq org-export-in-background t)
#+end_src

** Habits

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
#+end_src

** Refile

I want to be able to create headings when I refile (but with confirmation to
partially deal with typos).

#+begin_src emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

I also want to refile only on non-done states.

#+begin_src emacs-lisp
(defun nn/verify-refile-target ()
  "Exclude done todo states from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'nn/verify-refile-target)
#+end_src

** Spellcheck

Enabling flyspell when visiting org files.

#+begin_src emacs-lisp
(after! org (add-hook 'org-mode-hook 'turn-on-flyspell))
#+end_src

** Journal

I want a daily journal, with sensible ISO-approved™ date format for the file.

#+begin_src emacs-lisp
(setq org-journal-file-type 'daily
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

Occasionally I put =TODO= items in the journal, so I want these to be part of the
agenda files.

#+begin_src emacs-lisp
(setq org-journal-enable-agenda-integration t)
#+end_src

Finally, I like to start the week by listing overall goals, and I don't want
that to have a proper journal entry. Thus, I need some functions and nice
bindings.

#+begin_src emacs-lisp
(defun org-journal-today ()
  (interactive)
  (org-journal-new-entry t))

(map! :leader
      "n j t" #'org-journal-today)
#+end_src

** Roam

First, I set a couple of paths. I want my knowledge base to be part of my org
base, so I assign it to ~org-dir/kb~. I also don't want org-roam to pollute my
directory, so I put the database (and hopefully any other future file) into the
emacs cache dir.

#+begin_src emacs-lisp
(setq org-roam-directory (concat
                          (file-name-as-directory org-directory)
                          "kb/")
      org-roam-db-location (concat (file-name-as-directory doom-cache-dir) "org-roam.db"))
#+end_src

Next, I set roam to use directories as tags, since it's useful (at least) for my
compendium files.

#+begin_src emacs-lisp
(setq org-roam-tag-sources '(prop all-directories))
#+end_src

Finally, I set the capture templates that are exclusive to =org-roam=.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
        `(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head ,(concat "#+title: ${title}\n"
                          "#+created: %u\n"
                          "#+last_modified: %U\n")
           :unnarrowed t)
          ("m" "meeting" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "meetings/%<%Y%m%d%H%M%S>-${slug}"
           :head ,(concat "#+title: ${title}, %<%Y-%m-%d>\n"
                          "#+created: %u\n"
                          "#+last_modified: %U\n")
           :unnarrowed t)
          ("p" "project" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "projects/${slug}"
           :head ,(concat "#+title: ${title}\n"
                          "#+created: %u\n"
                          "#+last_modified: %U\n")
           :unnarrowed t)
          ;; These are more curated notes than others.
          ("c" "compendium" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "compendium/${slug}"
           :head ,(concat "#+title: ${title}\n"
                          "#+created: %u\n"
                          "#+last_modified: %U\n")
           :unnarrowed t)
          ("r" "review" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "reviews/${slug}"
           :head ,(concat "#+title: ${title}\n"
                          "#+created: %u\n"
                          "#+last_modified: %U\n")
           :unnarrowed t)
          ;; TODO I would like this to force me to specify the conference and/or
          ;; journal name, eventually.
          ("C" "Conference" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "${slug}"
           :head ,(concat"#+title: ${title}\n"
                         "#+date: %t\n"
                         "#+roam_tags: conference")
           :unnarrowed t)
          ))
#+end_src

** bibtex setup

We use all sort of packages to manage our bibliography. Here's where we configure them.

First, we make sure that =reftex, =bibtex-completion=, and the rest of packages
know where my bibliography is.

#+begin_src emacs-lisp
(defvar nn-bibliography-path (concat (file-name-as-directory org-directory) "library.bib")
  "Path to centralised biblio file.")
  ;; :type 'string)

(defvar nn-bibliography-notes-path (concat (file-name-as-directory org-directory) "kb/reviews/")
  "Path to notes directory")
  ;; :type 'string)
#+end_src

Next, we setup =bibtex-completion=.

#+begin_src emacs-lisp
(use-package! bibtex-completion
  :defer t
  :config

  ;; configure ivy
  (add-to-list 'ivy-re-builders-alist '(ivy-bibtex . ivy--regex-plus))

  ;; configure bibliography path
  (setq bibtex-completion-bibliography nn-bibliography-path
        bibtex-completion-notes-path nn-bibliography-notes-path)

  ;; Lookup file in bib entry
  (setq bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-pdf-field "file")

  ;; The default action otherwise is opening the pdf
  (setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)

  ;; this shouldn't be needed, because it'll be shadowed by org-roam-bibtex
  ;; but we still set it as fallback.
  (setq bibtex-completion-notes-template-multiple-files
        (concat
          "#+title: ${title} : (${=key=})\n"
          "#+created: %u\n"
          "- related ::\n"
          "- keywords :: ${keywords}\n"
          "\n* ${title}\n"
          ":PROPERTIES:\n"
          ":Custom_ID: ${=key=}\n"
          ":URL: ${url}\n"
          ":AUTHOR: ${author-or-editor}\n"
          ":NOTER_DOCUMENT: /${file}\n"
          ":NOTER_PAGE:\n"
          ":END:\n"))

  (defun ivy-bibtex-edit-note ()
    (interactive)
    (let ((ivy-bibtex-default-action 'ivy-bibtex-edit-notes))
      (ivy-bibtex)))

  (map! (:leader
         :prefix-map ("n". "notes")
         :desc "Bibliographic entries" "b" #'ivy-bibtex
         :desc "Bibliographic entries" "B" #'ivy-bibtex-edit-note
         (:prefix ("r" . "roam")
          :desc "Open bib note" "b" #'ivy-bibtex-edit-note))))
#+end_src

Then, it's time for =org-ref=.

#+begin_src emacs-lisp
(use-package! org-ref
  :after org
  :preface
   ;; org-ref needs this to be setup before require
  (setq org-ref-completion-library #'org-ref-ivy-cite)
  :config
  ;; configures various paths
  (setq org-ref-default-bibliography (list nn-bibliography-path)
        reftex-default-bibliography (list nn-bibliography-path)
        org-ref-notes-directory (concat (file-name-as-directory org-directory) "kb/reviews"))

  ;; 'org-ref-get-pdf-filename-helm-bibtex doesn't actually use helm
  (setq org-ref-open-pdf-function 'org-ref-get-pdf-filename-helm-bibtex)

  ;; Enables multiple note files (one per bib entry)
  (setq org-ref-notes-function 'org-ref-notes-function-many-files))
#+end_src

Finally, =org-roam-bibtex=!

#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  ;; HACK otherwise bibtex-completion-find-notes-function isn't declared
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :preface
  ;; keywords for orb-templates
  (defvar orb-preformat-keywords
    '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  :config
  (setq orb-templates
        `(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head ,(concat "#+title: ${=key=}: ${title}\n"
                          "#+created: %U\n"
                          "#+last_modified: %U\n"
                          "#+roam_key: ${ref}\n\n"
                          " - related ::\n\n"
                          "* ${title}\n"
                          ":PROPERTIES:\n"
                          ":Custom_ID: ${=key=}\n"
                          ":URL: ${url}\n"
                          ":AUTHOR: ${author-or-editor}\n"
                          ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
                          ":NOTER_PAGE:\n"
                          ":END:\n\n")
           :unnarrowed t))))
                           #+end_src

** org-noter

Thanks to =pdf-tools=, we have a nice way of viewing pdfs in Emacs. The package is
included in doom emacs, but here we set a bunch of decent keybindings:

#+begin_src emacs-lisp
(after! org-noter
  (setq org-noter-search-path nn-bibliography-notes-path
        org-noter-doc-split-fraction '(0.57 0.43))
  (map! :mode pdf-view-mode
        :map pdf-view-mode-map
        :nv "i" #'org-noter-insert-note
        :nv "J" #'org-noter-sync-next-note
        :nv "K" #'org-noter-sync-prev-note
        :nv "q" #'org-noter-kill-session))
#+end_src

** LaTeX in org buffers

We use ~org-fragtog~ to be able to modify LaTeX snippets simply by moving the
cursor on them.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

We then want them to look alright, so let's make org use a sans font, as well as
highlighting them:

#+begin_src emacs-lisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)
        org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{color}

\\usepackage[T1]{fontenc}
\\usepackage{mathtools}
\\usepackage{textcomp,amssymb}
\\usepackage[makeroom]{cancel}

\\usepackage{booktabs}

\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
% my custom stuff
\\usepackage{arev}
\\usepackage{arevmath}"))
#+end_src

** Deft

I use ~deft~ for searching my org files (though I should explore more what
org-roam gives me...), so I set it up here:

#+begin_src emacs-lisp
(setq deft-directory org-directory
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** Other stuff

#+begin_src emacs-lisp
(after! org
  (map! :localleader
        :map org-mode-map
        "M-n" #'org-next-visible-heading
        "M-p" #'org-previous-visible-heading))
#+end_src

** org-anki
#+begin_src emacs-lisp
(use-package! org-anki
  :hook (org-mode . org-anki-mode))
#+end_src

* Tools
** Generic UX changes

#+begin_src emacs-lisp
;;;; UX
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)

;; Switch to new window when splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t

      ;; isearch
      isearch-lazy-count t
      isearch-allow-scroll 'unlimited

      ;; magit
      magit-save-repository-buffers 'dontask
      ;; Don't restore window config after quitting magit
      magit-inhibit-save-previous-winconf t)

(add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
(add-to-list 'ispell-skip-region-alist '("~" "~"))
(add-to-list 'ispell-skip-region-alist '("=" "="))

#+end_src

** Editing setup

Most of =evil= is already well configured with =doom=, however I like to do some
additional tweaking:

#+BEGIN_SRC emacs-lisp
(setq
 ;; All changes are considere one block in insert mode by default. This is not
 ;; great most of the time, so we make evil use Emacs' heuristics to group
 ;; changes.
 evil-want-fine-undo t)
#+END_SRC
** File Templates

The =file-templates= module introduces a templating system that is used to
kickstart the content of certain buffers, depending on their name.

I don't want to use the ones pre-made by doom, so I point the module to my own
directory;

#+begin_src emacs-lisp
(setq +file-templates-dir (concat doom-private-dir "templates/files/"))
#+end_src

** Atomic Chrome

=atomic-chrome= is a package that enables to use emacs for text boxes in Chrome. I
set it up here to use =markdown-mode= whenever editing text (though =org-mode= is
also a good option). The [[https://chrome.google.com/webstore/detail/ghosttext/godiecgffnchndlihlpaajjcplehddca][GhostText add-on]] is required for this to work.

#+begin_src emacs-lisp
(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode
        atomic-chrome-buffer-open-style 'frame)
  (atomic-chrome-start-server))
#+end_src

* Languages
** Python

#+begin_src emacs-lisp
(setq conda-anaconda-home "~/.conda")
#+end_src

** TeX
